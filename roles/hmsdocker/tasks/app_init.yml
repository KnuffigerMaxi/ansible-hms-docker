- name: Init Prowlarr
  when: hmsdocker_container_enabled_prowlarr
  block:
    - name: Set Prowlarr facts
      ansible.builtin.set_fact:
        prowlarr_url: "http{{ 's' if traefik_ssl_enabled and not hmsdocker_expose_ports_enabled_prowlarr }}://{{ hms_docker_container_map['prowlarr']['proxy_host_rule'] }}.{{ hms_docker_domain }}{{ ':9696' if hmsdocker_expose_ports_enabled_prowlarr }}/api"
        prowlarr_sonarr_app_name: "HMSD - Sonarr"
        prowlarr_sonarr_4k_app_name: "HMSD - Sonarr - {{ separate_4k_instances_suffix }}"
        prowlarr_radarr_app_name: "HMSD - Radarr"
        prowlarr_radarr_4k_app_name: "HMSD - Radarr - {{ separate_4k_instances_suffix }}"
        prowlarr_flaresolverr_name: "HMSD - FlareSolverr"
        prowlarr_http_proxy_name: "HMSD - Transmission"

    - name: Precheck Prowlarr API Key
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: prowlarr_api_key_precheck

    - name: Get Prowlarr Tags
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}/v1/tag"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: prowlarr_tags

    - name: Set Prowlarr Tag Facts
      ansible.builtin.set_fact:
        prowlarr_tag_list: "{{ prowlarr_tags.json | json_query('[].label') }}"
        prowlarr_flaresolverr_tag: hmsd_flaresolverr
        prowlarr_transmission_tag: hmsd_transmission

    - name: Create Prowlarr Tags if not exist
      when: item not in prowlarr_tag_list
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}/v1/tag"
        method: POST
        body:
          label: "{{ item }}"
        status_code: 201
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      loop:
        - "{{ prowlarr_transmission_tag }}"
        - "{{ prowlarr_flaresolverr_tag }}"
      register: prowlarr_req_add_tags
      changed_when: prowlarr_req_add_tags.status == 201

    - name: Get Prowlarr Tags after creation
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}/v1/tag"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: prowlarr_tags

    - name: Set Prowlarr Tag Facts after creation
      ansible.builtin.set_fact:
        prowlarr_flaresolverr_tag_id: "{{ prowlarr_tags.json | json_query(flaresolverr_query) }}"
        prowlarr_transmission_tag_id: "{{ prowlarr_tags.json | json_query(transmission_query) }}"
      vars:
        flaresolverr_query: "[?label=='{{ prowlarr_flaresolverr_tag }}'].id"
        transmission_query: "[?label=='{{ prowlarr_transmission_tag }}'].id"

    - name: Get Prowlarr configured apps
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}/v1/applications"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: prowlarr_apps

    - name: Set Prowlarr App Facts
      ansible.builtin.set_fact:
        prowlarr_sonarr_apps: "{{ prowlarr_apps.json | json_query('[?implementation==`Sonarr`].name') }}"
        prowlarr_radarr_apps: "{{ prowlarr_apps.json | json_query('[?implementation==`Radarr`].name') }}"

    - name: Configure Sonarr apps in Prowlarr
      when: hmsdocker_container_enabled_sonarr
      block:
        - name: Ensure Prowlarr Sonarr app
          when: prowlarr_sonarr_app_name not in prowlarr_sonarr_apps
          ansible.builtin.uri:
            url: "{{ prowlarr_url }}/v1/applications"
            method: POST
            body: {
              name: "{{ prowlarr_sonarr_app_name }}",
              implementation: "Sonarr",
              configContract: "SonarrSettings",
              syncLevel: "fullSync",
              fields: [
                {
                  name: "prowlarrUrl",
                  value: "http://prowlarr:9696"
                },
                {
                  name: "baseUrl",
                  value: "http://sonarr:8989"
                },
                {
                  name: "apiKey",
                  value: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) }}"
                }
              ],
              
            }
            status_code: 201
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: prowlarr_req_add_sonarr
          changed_when: prowlarr_req_add_sonarr.status == 201

        - name: Ensure Prowlarr Sonarr 4K app
          when: prowlarr_sonarr_4k_app_name not in prowlarr_sonarr_apps and separate_4k_instances_enable
          ansible.builtin.uri:
            url: "{{ prowlarr_url }}/v1/applications"
            method: POST
            body: {
              name: "{{ prowlarr_sonarr_4k_app_name }}",
              implementation: "Sonarr",
              configContract: "SonarrSettings",
              syncLevel: "fullSync",
              fields: [
                {
                  name: "prowlarrUrl",
                  value: "http://prowlarr:9696"
                },
                {
                  name: "baseUrl",
                  value: "http://sonarr-4k:8989"
                },
                {
                  name: "apiKey",
                  value: "{{ slurped_api_key_sonarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
                }
              ],
              
            }
            status_code: 201
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: prowlarr_req_add_sonarr_4k
          changed_when: prowlarr_req_add_sonarr_4k.status == 201

    - name: Configure Radarr apps in Prowlarr
      when: hmsdocker_container_enabled_radarr
      block:
        - name: Ensure Prowlarr Radarr app
          when: prowlarr_radarr_app_name not in prowlarr_radarr_apps
          ansible.builtin.uri:
            url: "{{ prowlarr_url }}/v1/applications"
            method: POST
            body: {
              name: "{{ prowlarr_radarr_app_name }}",
              implementation: "Radarr",
              configContract: "RadarrSettings",
              syncLevel: "fullSync",
              fields: [
                {
                  name: "prowlarrUrl",
                  value: "http://prowlarr:9696"
                },
                {
                  name: "baseUrl",
                  value: "http://radarr:7878"
                },
                {
                  name: "apiKey",
                  value: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) }}"
                }
              ],
              
            }
            status_code: 201
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: prowlarr_req_add_radarr
          changed_when: prowlarr_req_add_radarr.status == 201

        - name: Ensure Prowlarr Radarr 4K app
          when: prowlarr_radarr_4k_app_name not in prowlarr_radarr_apps and separate_4k_instances_enable
          ansible.builtin.uri:
            url: "{{ prowlarr_url }}/v1/applications"
            method: POST
            body: {
              name: "{{ prowlarr_radarr_4k_app_name }}",
              implementation: "Radarr",
              configContract: "RadarrSettings",
              syncLevel: "fullSync",
              fields: [
                {
                  name: "prowlarrUrl",
                  value: "http://prowlarr:9696"
                },
                {
                  name: "baseUrl",
                  value: "http://radarr-4k:7878"
                },
                {
                  name: "apiKey",
                  value: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
                }
              ],
              
            }
            status_code: 201
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: prowlarr_req_add_radarr_4k
          changed_when: prowlarr_req_add_radarr_4k.status == 201

    - name: Get Indexer Proxies in Prowlarr
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}/v1/indexerproxy"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: prowlarr_idx_proxies

    - name: Set Prowlarr Proxy Facts
      ansible.builtin.set_fact:
        prowlarr_idx_proxies_http: "{{ prowlarr_idx_proxies.json | json_query('[?implementation==`Http`].name') }}"
        prowlarr_idx_proxies_flaresolverr: "{{ prowlarr_idx_proxies.json | json_query('[?implementation==`FlareSolverr`].name') }}"
        

    - name: Configure HTTP indexer proxy in Prowlarr
      when: prowlarr_http_proxy_name not in prowlarr_idx_proxies_http and hmsdocker_container_enabled_transmission
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}/v1/indexerproxy"
        method: POST
        body: {
          name: "{{ prowlarr_http_proxy_name }}",
          implementation: "Http",
          configContract: "HttpSettings",
          fields: [
            {
              name: "host",
              value: "transmission"
            },
            {
              name: "port",
              value: "8888"
            }
          ],
          tags: "{{ prowlarr_transmission_tag_id }}"
        }
        status_code: 201
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: prowlarr_req_add_transmission
      changed_when: prowlarr_req_add_transmission.status == 201

    - name: Configure FlareSolverr indexer proxy in Prowlarr
      when: prowlarr_flaresolverr_name not in prowlarr_idx_proxies_flaresolverr and hmsdocker_container_enabled_flaresolverr
      ansible.builtin.uri:
        url: "{{ prowlarr_url }}/v1/indexerproxy"
        method: POST
        body: {
          name: "{{ prowlarr_flaresolverr_name }}",
          implementation: "FlareSolverr",
          configContract: "FlareSolverrSettings",
          fields: [
            {
              name: "host",
              value: "http://flaresolverr:8191/"
            }
          ],
          tags: "{{ prowlarr_flaresolverr_tag_id }}"
        }
        status_code: 201
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: prowlarr_req_add_flaresolverr
      changed_when: prowlarr_req_add_flaresolverr.status == 201

    - name: Configure General proxy in Prowlarr
      block:
        - name: Get current system proxy status
          ansible.builtin.uri:
            url: "{{ prowlarr_url }}/v1/config/host"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: prowlarr_system_conf

        - name: Set Prowlarr config facts
          ansible.builtin.set_fact:
            prowlarr_id: "{{ prowlarr_system_conf.json['id'] }}"
            proxy_enabled: "{{ prowlarr_system_conf.json['proxyEnabled'] }}"
            prowlarr_system_conf_updated: "{{ prowlarr_system_conf.json | combine({
              'proxyEnabled': true,
              'proxyHostname': 'transmission',
              'proxyPort': 8888,
              'proxyType': 'http'
            }) }}"

        - name: Configure Prowlarr HTTP Proxy
          when: not proxy_enabled
          ansible.builtin.uri:
            url: "{{ prowlarr_url }}/v1/config/host/{{ prowlarr_id }}"
            method: PUT
            body: "{{ prowlarr_system_conf_updated }}"
            status_code: 202
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: prowlarr_req_add_system_proxy
          changed_when: prowlarr_req_add_system_proxy.status == 202

- name: Init Radarr
  when: hmsdocker_container_enabled_radarr
  block:
    - name: Get radarr container info
      ansible.builtin.docker_container_info:
        name: radarr
      register: radarr_container_info

    - name: Set Radarr facts
      ansible.builtin.set_fact:
        radarr_url: "http{{ 's' if traefik_ssl_enabled and not hmsdocker_expose_ports_enabled_radarr }}://{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}.{{ hms_docker_domain }}{{ ':7878' if hmsdocker_expose_ports_enabled_radarr }}/api"
        radarr_download_client_name: "HMSD - Transmission"

    - name: Configure General proxy in Radarr
      when: hmsdocker_container_enabled_transmission
      block:
        - name: Get current system proxy status
          ansible.builtin.uri:
            url: "{{ radarr_url }}/v3/config/host"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_system_conf

        - name: Set Radarr config facts
          ansible.builtin.set_fact:
            radarr_id: "{{ radarr_system_conf.json['id'] }}"
            proxy_enabled: "{{ radarr_system_conf.json['proxyEnabled'] }}"
            radarr_system_conf_updated: "{{ radarr_system_conf.json | combine({
              'proxyEnabled': true,
              'proxyHostname': 'transmission',
              'proxyPort': 8888,
              'proxyType': 'http'
            }) }}"

        - name: Configure Radarr HTTP Proxy
          when: not proxy_enabled
          ansible.builtin.uri:
            url: "{{ radarr_url }}/v3/config/host/{{ prowlarr_id }}"
            method: PUT
            body: "{{ radarr_system_conf_updated }}"
            status_code: 202
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_req_add_system_proxy
          changed_when: radarr_req_add_system_proxy.status == 202

    - name: Get Radarr root folders
      ansible.builtin.uri:
        url: "{{ radarr_url }}/v3/rootfolder"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: radarr_root_folders

    - name: Set Radarr root folder variables
      ansible.builtin.set_fact:
        radarr_accessible_root_folders: "{{ radarr_root_folders.json | json_query('[?accessible==`true`].path') }}"
        radarr_mount_list: "{{ radarr_container_info.container.Mounts | selectattr('Source', 'equalto', hms_docker_mount_path) | map(attribute='Destination') | list }}"
        hmsd_movie_folders: "{{ hms_docker_library_folders | selectattr('type', 'equalto', 'movies') | map(attribute='folder_name') | list }}"

    - name: Ensure root folder is configured in Radarr
      ansible.builtin.uri:
        url: "{{ radarr_url }}/v3/rootfolder"
        method: POST
        status_code:
          - 201
        body_format: json
        return_content: true
        body:
          path: "{{ dir[0] }}/{{ hms_docker_library_folder_name }}/{{ dir[1] }}"
        headers:
          X-Api-Key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) }}"
      when: (dir[0] + '/' + hms_docker_library_folder_name + '/' + dir[1]) not in radarr_accessible_root_folders
      with_nested:
        - "{{ radarr_mount_list }}"
        - "{{ hmsd_movie_folders }}"
      loop_control:
        loop_var: dir
      register: radarr_req_add_root
      changed_when: radarr_req_add_root.status == 201

    - name: Ensure download client in Radarr
      when: hmsdocker_container_enabled_transmission
      block:
        - name: Get download clients
          ansible.builtin.uri:
            url: "{{ radarr_url }}/v3/downloadclient"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_downloaders

        - name: Set Radarr download client Facts
          ansible.builtin.set_fact:
            radarr_download_clients: "{{ radarr_downloaders.json | json_query('[?implementation==`Transmission`].name') }}"

        - name: Configure Transmission download client in Radarr
          when: radarr_download_client_name not in radarr_download_clients
          ansible.builtin.uri:
            url: "{{ radarr_url }}/v3/downloadclient"
            method: POST
            body: {
              name: "{{ radarr_download_client_name }}",
              implementation: "Transmission",
              configContract: "TransmissionSettings",
              enable: true,
              fields: [
                {
                  name: "host",
                  value: "transmission"
                },
                {
                  name: "port",
                  value: 9091
                },
                {
                  name: "useSsl",
                  value: false
                },
                {
                  name: "urlBase",
                  value: "/transmission/"
                },
                {
                  name: "username"
                },
                {
                  name: "password"
                },
                {
                  name: "tvCategory"
                },
                {
                  name: "tvDirectory"
                },
                {
                  name: "recentTvPriority",
                  value: 0
                },
                {
                  name: "olderTvPriority",
                  value: 0
                },
                {
                  name: "addPaused",
                  value: false
                }
              ]
            }
            status_code: 201
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_req_add_download_client
          changed_when: radarr_req_add_download_client.status == 201


    - name: Ensure Radarr 4K Config
      when: separate_4k_instances_enable
      block:
        - name: Get radarr 4K container info
          ansible.builtin.docker_container_info:
            name: radarr-4k
          register: radarr_4k_container_info

        - name: Set Radarr 4K facts
          ansible.builtin.set_fact:
            radarr_4k_url: "http{{ 's' if traefik_ssl_enabled and not hmsdocker_expose_ports_enabled_radarr }}://{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.{{ hms_docker_domain }}{{ ':7879' if hmsdocker_expose_ports_enabled_radarr }}/api"
            radarr_download_client_name: "HMSD - Transmission"

        - name: Precheck Radarr 4K API Key
          ansible.builtin.uri:
            url: "{{ radarr_4k_url }}"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_4k_api_key_precheck

        - name: Configure General proxy in Radarr 4K
          when: hmsdocker_container_enabled_transmission
          block:
            - name: Get current system proxy status
              ansible.builtin.uri:
                url: "{{ radarr_4k_url }}/v3/config/host"
                method: GET
                status_code: 200
                body_format: json
                return_content: true
                headers:
                  X-Api-Key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
              register: radarr_4k_system_conf

            - name: Set Radarr 4K config facts
              ansible.builtin.set_fact:
                radarr_4k_id: "{{ radarr_4k_system_conf.json['id'] }}"
                proxy_enabled: "{{ radarr_4k_system_conf.json['proxyEnabled'] }}"
                radarr_4k_system_conf_updated: "{{ radarr_4k_system_conf.json | combine({
                  'proxyEnabled': true,
                  'proxyHostname': 'transmission',
                  'proxyPort': 8888,
                  'proxyType': 'http'
                }) }}"

            - name: Configure Radarr 4K HTTP Proxy
              when: not proxy_enabled
              ansible.builtin.uri:
                url: "{{ radarr_4k_url }}/v3/config/host/{{ prowlarr_id }}"
                method: PUT
                body: "{{ radarr_4k_system_conf_updated }}"
                status_code: 202
                body_format: json
                return_content: true
                headers:
                  X-Api-Key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
              register: radarr_4k_req_add_system_proxy
              changed_when: radarr_4k_req_add_system_proxy.status == 202

        - name: Get Radarr 4K root folders
          ansible.builtin.uri:
            url: "{{ radarr_4k_url }}/v3/rootfolder"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_4k_root_folders

        - name: Set Radarr 4K folder variables
          ansible.builtin.set_fact:
            radarr_accessible_root_folders: "{{ radarr_4k_root_folders.json | json_query('[?accessible==`true`].path') }}"
            radarr_4k_mount_list: "{{ radarr_4k_container_info.container.Mounts | selectattr('Source', 'equalto', hms_docker_mount_path) | map(attribute='Destination') | list }}"
            hmsd_movie_folders: "{{ hms_docker_library_folders | selectattr('type', 'equalto', 'movies') | map(attribute='folder_name') | list }}"

        - name: Ensure root folder is configured in Radarr 4K
          ansible.builtin.uri:
            url: "{{ radarr_4k_url }}/v3/rootfolder"
            method: POST
            status_code:
              - 201
            body_format: json
            return_content: true
            body:
              path: "{{ dir[0] }}/{{ hms_docker_library_folder_name }}/{{ dir[1] }}"
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
          when: (dir[0] + '/' + hms_docker_library_folder_name + '/' + dir[1]) not in radarr_accessible_root_folders
          with_nested:
            - "{{ radarr_4k_mount_list }}"
            - "{{ hmsd_movie_folders }}"
          loop_control:
            loop_var: dir
          register: radarr_4k_req_add_root
          changed_when: radarr_4k_req_add_root.status == 201

    - name: Ensure download client in Radarr 4K
      when: hmsdocker_container_enabled_transmission
      block:
        - name: Get download clients
          ansible.builtin.uri:
            url: "{{ radarr_4k_url }}/v3/downloadclient"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_4k_downloaders

        - name: Set download client Facts
          ansible.builtin.set_fact:
            radarr_4k_download_client_name: "HMSD - Transmission"
            radarr_4k_download_clients: "{{ radarr_4k_downloaders.json | json_query('[?implementation==`Transmission`].name') }}"

        - name: Configure Transmission download client in Radarr 4K
          when: radarr_4k_download_client_name not in radarr_4k_download_clients
          ansible.builtin.uri:
            url: "{{ radarr_4k_url }}/v3/downloadclient"
            method: POST
            body: {
              name: "{{ radarr_4k_download_client_name }}",
              implementation: "Transmission",
              configContract: "TransmissionSettings",
              enable: true,
              fields: [
                {
                  name: "host",
                  value: "transmission"
                },
                {
                  name: "port",
                  value: 9091
                },
                {
                  name: "useSsl",
                  value: false
                },
                {
                  name: "urlBase",
                  value: "/transmission/"
                },
                {
                  name: "username"
                },
                {
                  name: "password"
                },
                {
                  name: "tvCategory"
                },
                {
                  name: "tvDirectory"
                },
                {
                  name: "recentTvPriority",
                  value: 0
                },
                {
                  name: "olderTvPriority",
                  value: 0
                },
                {
                  name: "addPaused",
                  value: false
                }
              ]
            }
            status_code: 201
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
          register: radarr_4k_req_add_download_client
          changed_when: radarr_4k_req_add_download_client.status == 201

- name: Init Sonarr
  when: hmsdocker_container_enabled_radarr
  block:
    - name: Get sonarr container info
      ansible.builtin.docker_container_info:
        name: sonarr
      register: sonarr_container_info

    - name: Set Sonarr facts
      ansible.builtin.set_fact:
        sonarr_url: "http{{ 's' if traefik_ssl_enabled and not hmsdocker_expose_ports_enabled_sonarr }}://{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}.{{ hms_docker_domain }}{{ ':8989' if hmsdocker_expose_ports_enabled_sonarr }}/api"
        sonarr_download_client_name: "HMSD - Transmission"

    - name: Precheck Sonarr API Key
      ansible.builtin.uri:
        url: "{{ sonarr_url }}"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: sonarr_api_key_precheck

    - name: Get Sonarr root folders
      ansible.builtin.uri:
        url: "{{ sonarr_url }}/v3/rootfolder"
        method: GET
        status_code: 200
        body_format: json
        return_content: true
        headers:
          X-Api-Key: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) }}"
      register: sonarr_root_folders

    - name: Set Sonarr folder variables
      ansible.builtin.set_fact:
        sonarr_accessible_root_folders: "{{ sonarr_root_folders.json | json_query('[?accessible==`true`].path') }}"
        sonarr_mount_list: "{{ sonarr_container_info.container.Mounts | selectattr('Source', 'equalto', hms_docker_mount_path) | map(attribute='Destination') | list }}"
        hmsd_movie_folders: "{{ hms_docker_library_folders | selectattr('type', 'equalto', 'movies') | map(attribute='folder_name') | list }}"

    - name: Ensure root folder is configured in Sonarr
      ansible.builtin.uri:
        url: "{{ sonarr_url }}/v3/rootfolder"
        method: POST
        status_code:
          - 201
        body_format: json
        return_content: true
        body:
          path: "{{ dir[0] }}/{{ hms_docker_library_folder_name }}/{{ dir[1] }}"
        headers:
          X-Api-Key: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) }}"
      when: (dir[0] + '/' + hms_docker_library_folder_name + '/' + dir[1]) not in sonarr_accessible_root_folders
      with_nested:
        - "{{ sonarr_mount_list }}"
        - "{{ hmsd_movie_folders }}"
      loop_control:
        loop_var: dir
      register: sonarr_req_add_root
      changed_when: sonarr_req_add_root.status == 201

    - name: Ensure download client in Sonarr
      when: hmsdocker_container_enabled_transmission
      block:
        - name: Get download clients
          ansible.builtin.uri:
            url: "{{ sonarr_url }}/v3/downloadclient"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: sonarr_downloaders

        - name: Set download client Facts
          ansible.builtin.set_fact:
            sonarr_download_clients: "{{ sonarr_downloaders.json | json_query('[?implementation==`Transmission`].name') }}"

        - name: Configure Transmission download client in Sonarr
          when: sonarr_download_client_name not in sonarr_download_clients
          ansible.builtin.uri:
            url: "{{ sonarr_url }}/v3/downloadclient"
            method: POST
            body: {
              name: "{{ sonarr_download_client_name }}",
              implementation: "Transmission",
              configContract: "TransmissionSettings",
              enable: true,
              fields: [
                {
                  name: "host",
                  value: "transmission"
                },
                {
                  name: "port",
                  value: 9091
                },
                {
                  name: "useSsl",
                  value: false
                },
                {
                  name: "urlBase",
                  value: "/transmission/"
                },
                {
                  name: "username"
                },
                {
                  name: "password"
                },
                {
                  name: "tvCategory"
                },
                {
                  name: "tvDirectory"
                },
                {
                  name: "recentTvPriority",
                  value: 0
                },
                {
                  name: "olderTvPriority",
                  value: 0
                },
                {
                  name: "addPaused",
                  value: false
                }
              ]
            }
            status_code: 201
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) }}"
          register: sonarr_req_add_download_client
          changed_when: sonarr_req_add_download_client.status == 201

    - name: Ensure Sonarr 4K Config
      when: separate_4k_instances_enable
      block:
        - name: Get sonarr container info
          ansible.builtin.docker_container_info:
            name: sonarr-4k
          register: sonarr_4k_container_info

        - name: Set Sonarr 4K facts
          ansible.builtin.set_fact:
            sonarr_4k_url: "http{{ 's' if traefik_ssl_enabled and not hmsdocker_expose_ports_enabled_sonarr }}://{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.{{ hms_docker_domain }}{{ ':8990' if hmsdocker_expose_ports_enabled_sonarr }}/api"
            sonarr_download_client_name: "HMSD - Transmission"

        - name: Get Sonarr 4K root folders
          ansible.builtin.uri:
            url: "{{ sonarr_4k_url }}/v3/rootfolder"
            method: GET
            status_code: 200
            body_format: json
            return_content: true
            headers:
              X-Api-Key: "{{ slurped_api_key_sonarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
          register: sonarr_4k_root_folders

        - name: Set Sonarr 4K folder variables
          ansible.builtin.set_fact:
            sonarr_accessible_root_folders: "{{ sonarr_4k_root_folders.json | json_query('[?accessible==`true`].path') }}"
            sonarr_4k_mount_list: "{{ sonarr_4k_container_info.container.Mounts | selectattr('Source', 'equalto', hms_docker_mount_path) | map(attribute='Destination') | list }}"
            hmsd_movie_folders: "{{ hms_docker_library_folders | selectattr('type', 'equalto', 'movies') | map(attribute='folder_name') | list }}"

        - name: Ensure root folder is configured in Sonarr 4K
          ansible.builtin.uri:
            url: "{{ sonarr_4k_url }}/v3/rootfolder"
            method: POST
            status_code:
              - 201
            body_format: json
            return_content: true
            body:
              path: "{{ dir[0] }}/{{ hms_docker_library_folder_name }}/{{ dir[1] }}"
            headers:
              X-Api-Key: "{{ slurped_api_key_sonarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
          when: (dir[0] + '/' + hms_docker_library_folder_name + '/' + dir[1]) not in sonarr_accessible_root_folders
          with_nested:
            - "{{ sonarr_4k_mount_list }}"
            - "{{ hmsd_movie_folders }}"
          loop_control:
            loop_var: dir
          register: sonarr_4k_req_add_root
          changed_when: sonarr_4k_req_add_root.status == 201

        - name: Ensure download client in Sonarr 4K
          when: hmsdocker_container_enabled_transmission
          block:
            - name: Get download clients
              ansible.builtin.uri:
                url: "{{ sonarr_4k_url }}/v3/downloadclient"
                method: GET
                status_code: 200
                body_format: json
                return_content: true
                headers:
                  X-Api-Key: "{{ slurped_api_key_sonarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
              register: sonarr_4k_downloaders

            - name: Set download client Facts
              ansible.builtin.set_fact:
                sonarr_4k_download_client_name: "HMSD - Transmission"
                sonarr_4k_download_clients: "{{ sonarr_4k_downloaders.json | json_query('[?implementation==`Transmission`].name') }}"

            - name: Configure Transmission download client in Sonarr 4K
              when: sonarr_4k_download_client_name not in sonarr_4k_download_clients
              ansible.builtin.uri:
                url: "{{ sonarr_4k_url }}/v3/downloadclient"
                method: POST
                body: {
                  name: "{{ sonarr_4k_download_client_name }}",
                  implementation: "Transmission",
                  configContract: "TransmissionSettings",
                  enable: true,
                  fields: [
                    {
                      name: "host",
                      value: "transmission"
                    },
                    {
                      name: "port",
                      value: 9091
                    },
                    {
                      name: "useSsl",
                      value: false
                    },
                    {
                      name: "urlBase",
                      value: "/transmission/"
                    },
                    {
                      name: "username"
                    },
                    {
                      name: "password"
                    },
                    {
                      name: "tvCategory"
                    },
                    {
                      name: "tvDirectory"
                    },
                    {
                      name: "recentTvPriority",
                      value: 0
                    },
                    {
                      name: "olderTvPriority",
                      value: 0
                    },
                    {
                      name: "addPaused",
                      value: false
                    }
                  ]
                }
                status_code: 201
                body_format: json
                return_content: true
                headers:
                  X-Api-Key: "{{ slurped_api_key_sonarr_4k['content'] | b64decode | regex_search(arr_apikey) }}"
              register: sonarr_4k_req_add_download_client
              changed_when: sonarr_4k_req_add_download_client.status == 201
